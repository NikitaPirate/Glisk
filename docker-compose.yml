services:
  postgres:
    image: postgres:17
    container_name: backend-postgres-1
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-glisk}
      POSTGRES_USER: ${POSTGRES_USER:-glisk}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["postgres", "-c", "max_connections=200"]
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-glisk}"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Optional: Run migrations as separate one-time service
  # Uncomment this and comment out entrypoint.sh if you want explicit migration control
  # migrations:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: backend-migrations
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   command: ["uv", "run", "alembic", "upgrade", "head"]
  #   restart: "no"

  backend-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-api-1
    depends_on:
      postgres:
        condition: service_healthy
      # Uncomment if using separate migrations service:
      # migrations:
      #   condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "8000:8000"
    restart: unless-stopped

volumes:
  postgres_data:
